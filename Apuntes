*******************************************************INDICE***********************************************************
      0.- ENVIROMENT DIVISION 
          0.1.-  SELECT
          
      1.- DATA DIVISION
          1.1.-  FD
          
      2.- WORKING-STORAGE SECTION
          2.1.-  COPY
          2.2.- OCCURS
          
      3.- ROCEDURE DIVISION
          3.1.-  MOVE
          3.2.-  ACCEPT
                 3.2.1.- DATE
                 3.2.2.- SYSIN
          3.3.-  DISPLAY
          3.4.-  INITIALIZE
          3.5.-  ADD
          3.6.-  DIVIDE
          3.7.-  IF
          3.8.-  EVALUATE
          3.9.-  OPEN
          3.10.- CLOSE
          3.11.- SET
          3.12.- READ
          3.13.- WRITE
          3.14.- SUBTRACT
          3.15.- MULTIPLY
          3.16.- COMPUTE 
          3.17.- CALL
          3.18.- REDEFINES
          
       4.- RUTINAS
          4.1.- LINKAGE SECTION
          4.2.- PROCEDURE DIVISION
          4.3.- GOBACK
   
   
****************************************************ENVIROMENT DIVISION***************************************************

0.1.- SELECT      --> Permite asignar un nombre a un fichero que vayamos a utilizar e indicarle la ruta donde estÃ¡.
                      ASSIGN TO --> Indicamos la ruta donde se encuentra el fichero.
                      FILE STATUS IS --> Asignamos una variable para control de errores.
                      SELECT nombre_fichero ASSIGN TO ruta_fichero FILE STATUS IS variable_error
                      
                      
*******************************************************DATA DIVISION******************************************************

1.1.-  FD         --> Asigna un registro a un fichero, hay que establecer un nivel 01 para cada fichero en uso
                      FD nombre_fichero_select
                      

***************************************************WORKING-STORAGE SECTION************************************************

2.1.- COPY        --> Permite llamar a otro fichero que almacene variables
                      REPLACING --> Permite coger una cadena de la copy y transformala por otra
                      COPY ficherocopy_1 [REPLACING ==cadena_1== BY ==cadena_2==]

2.2.- OCCURS      --> Permite repetir varias veces una variable (tablas)
                      OCCURS n_veces TIMES --> indica cuantas veces se repite
                      [ASCENDING|DESCENDING] KEY IS WT-CODIGO-DEPART --> Indica un campo key.
                      INDEXED BY campo. --> Genera un indice


****************************************************PROCEDURE DIVISION****************************************************

3.1.-MOVE         --> Mueve el contenido de una variable a otra.
                      MOVE variable_1 TO variable_2

3.2.-ACCEPT       -->   3.2.1.- DATE      --> Para sacar la fecha del sistema. 
                                              ACCEPT variable_1 FROM DATE [YYYYMMDD]
                        3.2.2.- SYSIN     --> Para pedir una cadena por pantalla
                                              ACCEPT variable_1 FROM SYSIN.

3.3.-DISPLAY      --> Muestra por pantalla la sentencia indicada.
                      DISPLAY variable_1

3.4.- INITIALIZE  --> Inicia las variables que le indiquemos.
                      INITIALIZE variable_1

3.5.- ADD         --> Suma el contenido de las variables.
                      GIVING --> Guarda el contenido en otra variable.
                      ADD variable_1 TO variable_2 [GIVING variable_3]

3.6.- DIVIDE      --> Divide el contenido de las variables elegidas. 
                      GIVING --> Almacena el resultado en otra variable
                      REMAINDER --> Almacena el resto en otra variable, obligatorio uso de GIVING.
                      DIVIDE variable_1 BY variable_2 [GIVING variable_3 [REMAINDER variable_4]]

3.7.- IF          --> Genera un condicional.
                      IF condicion sentencias_1 [ELSE sentencias_2] END-IF

3.8.- EVALUATE    --> Evalua la condicion de una o varias variables y ejecuta diferentes acciones.
                      EVALUATE TRUE WHEN condicion_1 sentencias_1 [WHEN OTHER condicion_1 sentencias_1] END-EVALUATE
                      EVALUATE variable WHEN valor_1 sentencias_1 [WHEN OTHER valor_2 condicion_2] END-EVALUATE                   

3.9.-  OPEN       --> Abre un fichero para lectura o escritura. 
                      OPEN {INPUT/OUTPUT} fichero

3.10.- CLOSE      --> Sirve para cerrar fichero, se pueden cerrar varios a la vez.
                      CLOSE fichero

3.11.- SET        --> Cambiamos un switch a true, en cuanto una adopta la condicion de true, el resto se convierten en false.
                      SET condicion TO TRUE
                     
3.12.- READ       --> Lee cada uno de los registros de un fichero, solo uno por vez.
                      INTO --> Guardamos la informacion en la estructura creada anteriormente.
                      AT END --> Generamos una condicion al finalizar de leer el registro.
                      READ nombre_fichero INTO estructura [AT END condicion] END-READ

3.13.- WRITE      --> Nos permite escribir en un fichero (previamente abirto mediante OUTPUT).
                      FROM --> variable 01 de la estructura.
                      AFTER ADVANCING n LINES --> Al escribir salta de linea (Necesario en Linux).
                      AFTER ADVANCING PAGE --> Salta de pagina.
                      WRITE 01_fd FROM 01_estructura [AFTER ADVANCING n LINES] [ AFTER ADVANCING PAGE]
                                         
3.14.- SUBTRACT   --> Resta el contenido de una variable o campo
                      GIVING --> Almacena el contenido en otra variable
                      SUBTRACT variable_1 FROM variable_2 [GIVING variable_3]
                      
3.15.- MULTIPLY   --> Multiplica el contenido de dos variables o campo
                      GIVING --> Almacena el contenido en otra variable
                      MULTIPLY variable_1 BY variable_2 GIVING variable_3
                   
3.16.- COMPUTE    --> Permite realizar variables operaciones a la vez, recomendado uso de parentesis
                      Operadores --> +,-,*,/,** (exponencial)
                      COMPUTE campo_1 = campo_2 - campo_3 + campo_4...

3.17.- CALL       --> Permite llamar a una rutina para que ejecute una tares. Tiene que compartir una zona de memoria con la misma
                      estructura. 
                      CALL LT_RUTINA USING area_memoria
                      
3.18.- REDEFINES  --> Permite redefinir una variable con el contenido de otra. Tiene que definirse en el mismo nivel de la variable
                      que vamos a redefinir y seguida, sin variables de por medio.
                      05 WS-variable_1      PIC X(3).
                      05 WS_variable2       REDEFINES WS_variable_1.    
                      
**********************************************************RUTINAS*********************************************************     

4.1.- LINKAGE SECTION         --> Se coloca antes de la la PROCEDURE DIVISION y se define un area de memoria o COPY
                                  LINKAGE SECTION.
                                  COPY COPYRUTINA.
                                  
4.2.- PROCEDURE DIVISION      --> Se define directamente con el uso de un area de memoria.
                                  PROCEDURE DIVISION USING 01_estructura
                                  
4.3.- GOBACK                  --> Termina la rutina y vuelve al programa principal
